"""
Usage:
    python main_common.py log_defined_env_vars
    python main_common.py gen_ps1_env_var_script
    python main_common.py gen_bicep_and_compose_file_fragments
    python main_common.py gen_environment_variables_md
    python main_common.py gen_alpine_requirements_txt
    python main_common.py gen_all
    python main_common.py owl_visualizer ontologies/libraries.owl
    python main_common.py generate_rdflib_triples_builder ../../data/graph_input_metadata/vertex_signatures_imdb.json
    python main_common.py parse_owl ontologies/libraries.owl
    python main_common.py generate_owl ../../data/graph_input_metadata/vertex_signatures_imdb.json ../../data/graph_input_metadata/edge_signatures_imdb.json http://cosmosdb.com/imdb
    Options:
  -h --help     Show this screen.
  --version     Show version.
"""

# This program is for common ad-hoc tasks not related to the actual runtime app.
# Chris Joakim, Microsoft, 2025

import logging
import sys
import time

from datetime import datetime

from docopt import docopt
from dotenv import load_dotenv

from xml.sax import make_parser

from src.services.config_service import ConfigService
from src.services.logging_level_service import LoggingLevelService
from src.util.fs import FS
from src.util.owl_visualizer import OwlVisualizer
from src.util.graph_builder_generator import GraphBuilderGenerator
from src.util.owl_generator import OwlGenerator
from src.util.owl_sax_handler import OwlSaxHandler

logging.basicConfig(
    format="%(asctime)s - %(message)s", level=LoggingLevelService.get_level()
)


def print_options(msg):
    print(msg)
    arguments = docopt(__doc__, version="1.0.0")
    print(arguments)


def log_defined_env_vars():
    logging.info("log_defined_env_vars")
    ConfigService.log_defined_env_vars()


def gen_ps1_env_var_script():
    env_var_names = sorted(ConfigService.defined_environment_variables().keys())
    samples = ConfigService.sample_environment_variable_values()
    lines = list()
    lines.append(
        "# PowerShell script to set the necessary CAIG_ environment variables,"
    )
    lines.append("# generated by main.py on {}".format(time.ctime()))
    lines.append("# Edit ALL of these generated values per your actual deployment.")
    lines.append("")
    lines.append('echo "Setting CAIG environment variables"')

    for name in env_var_names:
        value = "xxx"  # ConfigService.envvar(name, '')
        if name in samples:
            value = samples[name]
        lines.append("")
        lines.append("echo 'setting {}'".format(name))
        lines.append(
            "[Environment]::SetEnvironmentVariable(|{}|, |{}|, |User|)".format(
                name, value
            ).replace("|", '"')
        )
    lines.append("")
    FS.write_lines(lines, "../set-caig-env-vars-sample.ps1")


def gen_bicep_and_compose_file_fragments():
    bicep_parm_names_lines = list()
    bicep_bicepparam_lines = list()
    bicep_parm_names_lines.append(
        "// Bicep parameter names generated by main.py on {}".format(time.ctime())
    )
    bicep_parm_names_lines.append("// Include these to the top of your caig.bicep file")
    bicep_parm_names_lines.append("")

    bicep_bicepparam_lines.append(
        "// Bicep bicepparam entries generated by main.py on {}".format(time.ctime())
    )
    bicep_bicepparam_lines.append("// Include these in your caig.bicepparam file")
    bicep_bicepparam_lines.append("")
    bicep_bicepparam_lines.append("using './caig.bicep'")
    bicep_bicepparam_lines.append("")

    env_var_names = sorted(ConfigService.defined_environment_variables().keys())
    excluded_var_names = excluded_bicep_envvars()
    names_map = dict()  # key is the envvar name, value is the bicep name

    for name in env_var_names:
        if name in excluded_var_names:
            pass
        else:
            bicepName = camel_case(name)
            names_map[name] = bicepName

            # declare the param in the bicep file
            bicep_parm_names_lines.append("param {} string".format(bicepName))

            # get the param value in the bicepparam file
            bicepparam_line = "param {} = readEnvironmentVariable('{}')".format(
                bicepName, name
            )
            bicep_bicepparam_lines.append(bicepparam_line)

    bicep_parm_names_lines.append("")
    bicep_bicepparam_lines.append("")

    FS.write_lines(
        bicep_parm_names_lines, "../../deployment/generated-param-names.bicep"
    )
    FS.write_lines(bicep_bicepparam_lines, "../../deployment/generated.bicepparam")

    bicep_env_lines = list()
    for env_name in sorted(names_map.keys()):
        bicep_name = names_map[env_name]
        bicep_env_lines.append("{")
        bicep_env_lines.append("  name: '{}'".format(env_name))
        bicep_env_lines.append("  value: {}".format(bicep_name))
        bicep_env_lines.append("}")
    FS.write_lines(bicep_env_lines, "../../deployment/generated.bicep.env")

    # docker-compose file fragment
    
    env_var_names = ConfigService.graph_runtime_environment_variables()
    compose_env_lines = list()
    compose_env_lines.append("# Graph Service")
    for env_name in sorted(env_var_names):
        name_with_colon = env_name + ":"
        compose_env_lines.append("{:<35} ${}".format(name_with_colon, env_name))

    env_var_names = ConfigService.web_runtime_environment_variables()
    compose_env_lines.append("")
    compose_env_lines.append("# Web Service")
    for env_name in sorted(env_var_names):
        name_with_colon = env_name + ":"
        compose_env_lines.append("{:<35} ${}".format(name_with_colon, env_name))

    FS.write_lines(compose_env_lines, "../../deployment/generated.compose.env")


def excluded_bicep_envvars():
    """
    Return a list of the CAIG_xxx environment variable names that should be excluded
    from generating the Bicep names and parameters files.  These names are used
    elsewhere in the system, but not by the Bicep deployment process.
    """
    vars = list()
    # vars.append("CAIG_GRAPH_SERVICE_PORT")
    # vars.append("CAIG_GRAPH_SERVICE_URL")
    # vars.append("CAIG_LOG_LEVEL")
    vars.append("CAIG_HOME")
    vars.append("CAIG_WEB_APP_PORT")
    vars.append("CAIG_WEB_APP_URL")
    return vars


def gen_envvars_master_entries():
    """generate a partial config file for my personal envvar solution - cj"""
    samples = ConfigService.sample_environment_variable_values()
    env_var_names = sorted(ConfigService.defined_environment_variables().keys())
    lines = list()
    for name in env_var_names:
        value = ConfigService.envvar(name, "")
        if len(value) == 0:
            if name in samples.keys():
                value = samples[name]
        padded = name.ljust(35)
        lines.append("{} ||| {}".format(padded, value))
    FS.write_lines(lines, "tmp/caig-envvars-master.txt")


def camel_case(env_var_name):
    tokens = env_var_name.split("_")
    words = list()
    for token_idx, token in enumerate(tokens):
        if token_idx > 0:
            lcword = token.lower()
            if token_idx == 1:
                words.append(lcword)
            else:
                words.append(lcword.capitalize())
    return "".join(words)


def gen_environment_variables_md():
    lines = list()
    lines.append("# CosmosAIGraph Implementation 1 : Environment Variables")
    lines.append("")
    lines.append(
        "Per the [Twelve-Factor App methodology](https://12factor.net/config),"
    )
    lines.append("configuration is stored in environment variables.  ")
    lines.append(
        "This is the standard practice for Docker-containerized applications deployed to orchestrators"
    )
    lines.append(
        "such as Azure Kubernetes Service (AKS) and Azure Container Apps (ACA)."
    )
    lines.append("")

    lines.append("## Defined Variables")
    lines.append("")
    lines.append("This reference implementation uses the following environment variables.")
    lines.append("All of these begin with the prefix `CAIG_`.")
    lines.append("")

    lines.append("| Name | Description | Where Used |")
    lines.append(
        "| --------------------------------- | --------------------------------- | ---------- |"
    )
    env_var_names = sorted(ConfigService.defined_environment_variables().keys())
    for name in env_var_names:
        full_desc = ConfigService.defined_environment_variables()[name]
        short_desc = full_desc.split("(")[0]
        where_used = full_desc.split("(")[1].replace("(","").replace(")","")
        lines.append("| {} | {} | {} |".format(name, short_desc, where_used))

    lines.append("")
    lines.append("## Setting these Environment Variables")
    lines.append("")
    lines.append(
        "The repo contains generated PowerShell script **impl/set-caig-env-vars-sample.ps1**"
    )
    lines.append("which sets all of these CAIG_ environment values.")
    lines.append(
        "You may find it useful to edit and execute this script rather than set them manually on your system"
    )
    lines.append("")

    lines.append("")
    lines.append("## python-dotenv")
    lines.append("")
    lines.append(
        "The [python-dotenv](https://pypi.org/project/python-dotenv/) library is used"
    )
    lines.append("in each subapplication of this implementation.")
    lines.append(
        "It allows you to define environment variables in a file named **`.env`**"
    )
    lines.append(
        "and thus can make it easier to use this project during local development."
    )
    lines.append("")
    lines.append(
        "Please see the **dotenv_example** files in each subapplication for examples."
    )
    lines.append("")
    lines.append(
        "It is important for you to have a **.gitignore** entry for the **.env** file"
    )
    lines.append(
        "so that application secrets don't get leaked into your source control system."
    )
    lines.append("")

    lines.append("")
    lines.append("## Java .override.properties file")
    lines.append("")
    lines.append("The Java codebase in this repo implements similar logic to the python-dotenv described above.")
    lines.append("")
    lines.append("See file **example-override.properties** in the **impl/graph_app/** directory.")
    lines.append("")

    FS.write_lines(lines, "../../docs/environment_variables.md")

def gen_alpine_requirements_txt():
    in_lines = FS.read_lines("requirements.txt")
    out_lines = list()
    now = datetime.now() 
    ts = now.strftime("%m/%d/%Y, %H:%M:%S")
    out_lines.append("# Python requirements file for the Alpine Linux Docker image.")
    out_lines.append("# It excludes the Windows-specific libraries.")
    out_lines.append("# Generated by main_common.py on {}\n".format(ts))

    for line in in_lines:
        stripped = line.strip()
        include_line = True
        if stripped.startswith("#"):
            include_line = False
        if 'pywin' in stripped:
            include_line = False
        if include_line == True:
            out_lines.append(line.strip())
    FS.write_lines(out_lines, "requirements-alpine.txt")

def gen_all():
    log_defined_env_vars()
    gen_envvars_master_entries()
    gen_ps1_env_var_script()
    gen_bicep_and_compose_file_fragments()
    gen_environment_variables_md()
    gen_alpine_requirements_txt()


def owl_visualizer(infile):
    """This functionality is EXPERIMENTAL at this time."""
    owl_viz = OwlVisualizer(infile)
    content = owl_viz.generate_visjs_content()
    print(content)


def ad_hoc_development():
    pass


def generate_rdflib_triples_builder(vertex_signatures_filename: str):
    generator = GraphBuilderGenerator()
    code_lines = generator.generate(vertex_signatures_filename)
    for line in code_lines:
        print(line)


def parse_owl(owl_file_path: str):
    parser = make_parser()
    handler = OwlSaxHandler()
    parser.setContentHandler(handler)
    parser.parse(owl_file_path)
    FS.write_json(handler.get_data(), "tmp/owl_xml_handler.json")


def generate_owl(
    vertex_signatures_filename: str, edge_signatures_filename: str, namespace: str
):
    generator = OwlGenerator()
    xml = generator.generate(
        vertex_signatures_filename, edge_signatures_filename, namespace
    )
    print(xml)


if __name__ == "__main__":
    load_dotenv(override=True)

    if len(sys.argv) < 2:
        print_options("Error: invalid command-line")
        exit(1)
    else:
        try:
            func = sys.argv[1].lower()
            if func == "log_defined_env_vars":
                log_defined_env_vars()
            elif func == "gen_ps1_env_var_script":
                gen_ps1_env_var_script()
            elif func == "gen_bicep_and_compose_file_fragments":
                gen_bicep_and_compose_file_fragments()
            elif func == "gen_environment_variables_md":
                gen_environment_variables_md()
            elif func == "gen_alpine_requirements_txt":
                gen_alpine_requirements_txt()
            elif func == "gen_all":
                gen_all()
            elif func == "owl_visualizer":
                infile = sys.argv[2]
                owl_visualizer(infile)
            elif func == "generate_rdflib_triples_builder":
                vertex_signatures_filename = sys.argv[2]
                generate_rdflib_triples_builder(vertex_signatures_filename)
            elif func == "parse_owl":
                owl_file_path = sys.argv[2]
                parse_owl(owl_file_path)
            elif func == "generate_owl":
                vertex_signatures_filename = sys.argv[2]
                edge_signatures_filename = sys.argv[3]
                namespace = sys.argv[4]
                generate_owl(
                    vertex_signatures_filename, edge_signatures_filename, namespace
                )
            elif func == "ad_hoc":
                ad_hoc_development()
            else:
                print_options("Error: invalid function: {}".format(func))
        except Exception as e:
            logging.critical(str(e))
            logging.exception(e, stack_info=True, exc_info=True)
